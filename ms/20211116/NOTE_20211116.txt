Vue.js

웹 페이지 화면을 개발하기 위한 프런트엔드 프레임워크

뷰 코어 라입브러리는 화면단 데이터 표현에 관한 기능들을 중점적으로 지원하지만 
프레임워크의 기능인 라우터, 상태관리, 테스팅 등을 쉽게 결합할 수 있는 형태로도 제공된다

앵귤러의 데이터 바인딩 특성 + 리액트의 가상 돔(Virtual DOM)기반 렌더링 특징을 모두 가지고 있다

MVVM 패턴의 뷰 모델(ViewModel)에 해당하는 화면단 라이브러리



* UI 화면단 라이브러리

MVVM 패턴 - 마크업 언어나 GUI 코드를 비즈니스 로직 또는 백엔드 로직과 분리하여 개발하는 소프트웨어 디자인
( 프런트엔드의 화면 동작과 관련된 로직과 백엔드와의 데이터베이스 데이터 처리 로직을 분리하여 깔끔하게 코드 구성)

이유 : 화면의 요소들을 제어하는 코드와 데이터 제어 로직을 분리하여 코드를 더 직관적으로 이해할 수 있고, 유지보수가 편해짐

	┌ - - - - - ┐     ┌ - - - - - - - - - - - - - - ┐     ┌ - - - - - ┐
	|           |     |     뷰 모델(ViewModel)      |     |           |
	|  뷰(View) |			|                             |     |   모델    |
	|           | --- |   돔 리스너(DOM Listener)   | --→ |  (Model)  |
	|           |     |                             |     |           |
	|           | ←-- | 데이터 바인딩(Data Binding) | --- |           |
	└ - - - - - ┘     └ - - - - - - - - - - - - - - ┘     └ - - - - - ┘
	   돔(DOM)                  뷰(Vue.js)              자바스크립트 객체
		 
	뷰(View) : 사용자에게 보이는 화면단
	
	돔(DOM) : HTML 문서에 들어가는 요소(태그, 클래스, 속성 등)의 정보를 담고 있는 데이터 트리
	
	돔 리스너(DOM Listener) : 돔의 변경 내역에 대해 즉각적으로 반응하여 특정 로직을 수행하는 장치
	
	모델(Model) : 데이터를 담는 용기. 보통은 서버에서 가져온 데이터를 자바스크립트 객체 형태로 저장
	
	데이터 바인딩(Data Binding) : 뷰(View)에 표시되는 내용과 모델의 데이터를 동기화
	
	뷰 모델(ViewModel) : 뷰와 모델의 중간 영역. 돔 리스너와 데이터 바인딩을 제공하는 영역
	
	
* 컴포넌트 기반 프레임워크

뷰의 컴포넌트를 조합하여 화면을 구성할 수 있다.

컴포넌트 기반 방식은 코드를 재사용하기가 쉽기 때문이다.

뷰의 경우는 HTML 코드에서 화면의 구조를 직관적으로 파악할 수 있다.


* 리액트와 앵귤러의 장점을 가진 프레임워크

뷰는 앵귤러의 양방향 데이터바인딩과 리액트의 단방향 데이터 흐름의 장점을 모두 결합한 프레임 워크
	
양방향 데이터 바인딩 : 화면에 표시되는 값가 프레임워크의 모델 데이터 값이 동기화되어 한쪽이 변경되면 다른 한쪽도 자동으로 변경되는것

단방향 데이터 흐름 : 컴포넌트의 단방향 통신 한 방향으로만 전달하게끔 프레임워크가 구조화 되어 있는 것
	
빠른 화면 렌더링을 위해 리액트의 가상 돔 렌더링 방식을 적용하여 사용자 인터랙션이 많은 요즘의 웹 화면에 적합한 동작 구조를 갖추고 있다


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

뷰 인스턴스 & 컴포넌트

뷰 인스턴스는 뷰로 화면을 개발하기 위해 필수적으로 생성해야 하는 기본 단위

뷰 인스턴스 옵션 속성 : 인스턴스를 생성할때 재정의할 data, el, template 등의 속성을 의미합니다.

	* 인스턴스 옵션 속성 적용 과정
	
	뷰 라이브러리 파링 로딩 → 인스턴스 객체 생성(옵션 속성 포함) → 특정 화면 요소에 인스턴스 붙임 → 
	인스턴스 내용이 화면요소로 변환 → 변환된 화면 요소를 사용자가 최종 확인


뷰 인스턴스 라이프 사이클 

라이플 사이클 속성 : 인스턴스 상태에 따라 호출할 수 있는 속성

라이프 사이클 훅(hook) : 각 라이플 사이클 속성에서 실행되는 커스텀 로직


인스턴스 생성
		│ 
		│	 ← 이벤트 및 라이플 사이클 초기화
		▼
beforeCreate : data, methods 정의 되어있지 않고, 돔과 같은 화면 요소에도 접근 불가
		│
		│	 ← 화면에 반응성 주입
		▼
	create : data, methods 정의 & 접근 & 로직 실행, 인스턴스 부착 전이기 때문에 template 속성에 정의된 돔 요소로 접근 불가
		│  ← el, template 속성 확인
		│	 ← template 속성 내용을 render()로 변환
		▼
beforeMount : template속성에 지정한 마크업 속성을 render() 함수로 변환 후 el속성에 지정한 돔에 인스턴스 부착 전에 호출 ( render() 함수가 호출되기 직전의 로직 추가 )
		│
		│ 	← $el 생성 후 el 속성 값을 대입
		▼
 mounted : 인스턴스 부착 후 호출, template속성에 정의한 돔에 접근할 수 있어 화면 요소를 제어하는 로직을 수행하기 좋음( 돔에 인스턴스가 부착되자마자 바로 호출되기 때문에 변환되는 시점이 다를 수 있다 )
		▼
인스턴스를 화면에 부착
		|  #점선구간은 데이터가 변경되는 경우에만 거침
		|	 ← 인스턴스의 데이터 변경
		▼
beforeUpdate : 인스턴스에 정의한 속성들이 화면에 치환, 데이터가 변경되면 가상 돔으로 화면을 다시 그리기 전에 호출되는 단계
		|
		|	 ← 화면 재 렌더링 및 데이터 갱신
		▼
updated : 데이터가 변경되고 나서 가상 돔으로 다시 화면을 그리고 나면 실행되는 단계, 데이터 변경 후 화면 요소 제어와 관련된 로직 추가하기 좋은 단계
		|
		▼
인스턴스 내용 갱신
		│
		│	 ← 인스턴스 접근 가능
		▼
beforeDestroy : 인스턴스 파괴되기 직전, 아직 인스턴스 접근가능, 인스턴스의 데이터를 삭제하기 좋은 단계
		│
		│	 ← 컴포넌트, 인스턴스, 디렉티브 등 모두 해제
		▼
destroyed : 인스턴스가 파괴되고 나서 호출, 인스턴스에 정의한 모든 속성 제거, 하위에 선언한 인스턴스들 또한 파괴
		▼
인스턴스 소멸


1단계 : 인스턴스의 생성
2단계 : 생성된 인스턴스를 화면에 부착
3단계 : 화면에 부착된 인스턴스의 내용이 갱신
4단계 : 인스턴스가 제거되는 소멸 










